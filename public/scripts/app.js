(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _game = require("./game");

var _game2 = _interopRequireDefault(_game);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener("DOMContentLoaded", function () {
  var game = new _game2.default(4);
});

},{"./game":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Game = function Game(size) {
  this.size = size;
  this.$table = document.querySelector('.grid-container');
  this.$tileContainer = document.querySelector('.tile-container');
  this.queue = [];
  this.setup();
};

Game.prototype.setup = function () {
  this.store = new _store2.default();
  this.store.subscribe(this.render.bind(this));
  this.store.dispatch({
    type: 'INIT',
    size: 4
  });
  this.eventListeners();
};

Game.prototype.render = function (state) {
  this.$tileContainer.innerHTML = '';
  var grid = state.grid;
  var tiles = (0, _utils.flattern)((0, _utils.flattern)(grid));
  for (var i = 0; i < tiles.length; i++) {
    var $tile = document.createElement('div');
    $tile.classList.add('tile');
    $tile.classList.add('tile-' + tiles[i].value);
    $tile.classList.add('tile-position-' + (tiles[i].x + 1) + '-' + (tiles[i].y + 1));
    $tile.innerHTML = tiles[i].value;
    this.$tileContainer.appendChild($tile);
  }
};

Game.prototype.eventListeners = function () {
  var _this = this;

  var map = {
    38: 'UP',
    39: 'RIGHT',
    40: 'DOWN',
    37: 'LEFT'
  };
  document.addEventListener("keydown", function (event) {
    var modifiers = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
    var direction = map[event.which];

    if (!modifiers) {
      if (direction !== undefined) {
        event.preventDefault();
        _this._prepare(direction);
      }
    }
  });
};

Game.prototype._prepare = function (direction) {
  var _this2 = this;

  this.store.dispatch({
    type: 'MOVE_TILE',
    direction: direction
  });
  setTimeout(function () {
    _this2.store.dispatch({
      type: 'ACTUALIZE'
    });
  }, 1000);

  setTimeout(function () {
    _this2.store.dispatch({
      type: 'MERGE_TILE'
    });
  }, 200);
};

exports.default = Game;

},{"./store":3,"./utils":4}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('./utils');

var subscribers = [];
var id = 0;
var initialState = {
  win: null,
  score: 0,
  cells: (0, _utils.generateCells)(4, 4),
  grid: (0, _utils.generateGrid)(4, 4),
  isActual: true
};

var Store = function Store() {
  this.oldState = {};
  this.state = initialState;
};

Store.prototype.subscribe = function (cb) {
  subscribers.push(cb);
};

Store.prototype.triggerSubscribers = function () {
  var _this = this;

  subscribers.forEach(function (subscriber) {
    subscriber(_this.state);
  });
};

Store.prototype.reduce = function (action, state) {
  switch (action.type) {
    case 'INIT':
      return this.getInitialState(action.size);
    case 'MOVE_TILE':
      return moveInDirection(action.direction, state);
    case 'ACTUALIZE':
      return actualize(state);
    case 'MERGE_TILE':
      return mergeTiles(state);
  }
  return state;
};

Store.prototype.dispatch = function (action) {
  this.oldState = this.state;
  this.state = this.reduce(action, this.state);
  this.triggerSubscribers();
};

Store.prototype.getState = function () {
  return this.state;
};

Store.prototype.getInitialState = function (size) {
  var startCount = 2;
  var state = this.state;
  var cell = void 0;
  while (startCount > 0) {
    cell = (0, _utils.randomCell)(state.cells);
    console.log(cell);
    state = newTile(state, cell);
    startCount--;
  }
  return state;
};

function newTile(state, cell) {
  state = Object.assign({}, state);
  if (!state.cells.length) return state;

  var x = (0, _utils.flattern)((0, _utils.flattern)(state.grid)).find(function (t) {
    return t.value === 'x';
  });

  if (id > 1 && !x) state = addTile(state, cell, "x");else state = addTile(state, cell);
  state.cells = state.cells.filter(function (obj) {
    return !(obj.x === cell.x && obj.y === cell.y);
  });
  return state;
}

function addTile(state, tile, value) {
  state = Object.assign({}, state);
  tile = Object.assign({}, tile);
  tile.id = id++;
  tile.value = value || 2;
  state.grid[tile.x][tile.y].push(tile);
  return state;
}

function moveInDirection(direction, state) {
  state = Object.assign({}, state);
  var initial = state;
  var directions = ['UP', 'RIGHT', 'DOWN', 'LEFT'];
  var tiles = (0, _utils.flattern)((0, _utils.flattern)(state.grid));

  var check = function check(current) {
    if (current !== direction) initial = state;

    directions = directions.filter(function (dir) {
      return dir !== current;
    });
    tiles = sortTiles(tiles, current);
    state = moveTiles(state, tiles, current);

    if (initial === state) {
      if (directions.length) return check(directions[0]);
      return state.win = false;
    }

    return current !== direction ? initial : state;
  };

  return check(direction);
}

function sortTiles(tiles, direction) {
  var _getCurrent = (0, _utils.getCurrent)(direction);

  var axis = _getCurrent.axis;
  var value = _getCurrent.value;

  tiles = tiles.sort(function (a, b) {
    return a[axis] - b[axis];
  });
  if (value < 0) tiles = tiles.reverse();
  return tiles;
}

function moveTiles(state, tiles, direction) {
  tiles.forEach(function (tile) {
    return state = moveTile(state, tile, direction);
  });
  return state;
}

function moveTile(state, tile, direction) {
  state = Object.assign({}, state);
  var available = findAvailableCell(state, tile, direction);
  if (available) {
    state.isActual = false;
    state.grid[available.index][available.value].push(tile);
    state.grid[tile.x][tile.y].pop();
  }

  return state;
}

function findAvailableCell(state, tile, direction) {
  var available = void 0;

  var _getCurrent2 = (0, _utils.getCurrent)(direction);

  var axis = _getCurrent2.axis;
  var value = _getCurrent2.value;

  var from = tile[axis];
  var to = value < 0 ? 4 - 1 : 0;
  var arr = [];

  if (from <= to) {
    while (from <= to) {
      arr.push(from++);
    }
  } else {
    while (to >= from) {
      arr.push(to--);
    }
  }

  arr.forEach(function (index) {
    var path = void 0;
    if (axis === 'x') {
      path = {
        index: index,
        value: tile.y
      };
    } else {
      path = {
        index: tile.x,
        value: index
      };
    }

    var cell = state.grid[path.index][path.value];

    if (!isSuitable(cell, tile)) {
      available = null;
      return;
    }

    if (tile.value === "x") {
      if (cell.length === 1 || !cell.length && !available) available = path;
    } else {
      available = available || path;
    }
  });

  return available;
}

function isSuitable(cell, tile) {
  var t1 = cell[0] ? cell[0].value : '';
  var t2 = tile.value;

  if (cell.length > 1) return false;
  if (cell.length) {
    if (t1 === 'x' || t2 === 'x') return true;
    if (t1 !== t2) return false;
  }

  return true;
}

function actualize(state) {
  state = Object.assign({}, state);
  var grid = state.grid;

  grid.forEach(function (row, x) {
    row.forEach(function (cell, y) {
      if (!cell.length) return;
      cell.forEach(function (tile, index) {
        if (tile.x !== x || tile.y !== y) {
          grid[x][y][index].x = x;
          grid[x][y][index].y = y;
        }
      });
    });
  });
  state.isActual = true;
  state.grid = grid;
  return state;
}

function mergeTiles(state) {
  state = Object.assign({}, state);
  var cells = [];
  var grid = state.grid;
  var result = 0;

  grid.forEach(function (row, x) {
    row.forEach(function (cell, y) {
      if (!cell.length) {
        cells.push({ x: x, y: y });
      }
      if (cell.length > 1) {
        var value = cell.reduce(function (t1, t2) {
          return calculateTiles(t1, t2);
        });

        result += value;
        // grid = grid.updateIn([x, y], () => List.of(cell.first().merge({value, id: id++})));
        state.win = value === '2048' || null;
        state.score += value;
      }
    });
  });

  state.cells = cells;
  state.result = result;
  state.grid = grid;

  return state;
}

function calculateTiles(t1, t2) {
  if (t1.value === "x") return t2.value * 2;
  if (t2.value === "x") return t1.value * 2;
  return t1.value + t2.value;
}

exports.default = Store;

},{"./utils":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateCells = generateCells;
exports.generateGrid = generateGrid;
exports.randomCell = randomCell;
exports.flattern = flattern;
exports.getCurrent = getCurrent;
function generateCells(x, y) {
  var cells = [];

  for (var i = 0; i < x; i++) {
    for (var j = 0; j < y; j++) {
      cells.push({
        x: i,
        y: j
      });
    }
  }

  return cells;
}

function generateGrid(x, y) {
  var cells = [];

  for (var i = 0; i < x; i++) {
    cells[i] = [];
    for (var j = 0; j < y; j++) {
      cells[i][j] = [];
    }
  }

  return cells;
}

function randomCell(cells) {
  var max = cells.length;
  return cells[Math.floor(Math.random() * max)];
}

function flattern(arr) {
  arr = arr.slice();
  return arr.reduce(function (a, b) {
    return a.concat(b);
  });
}

function getCurrent(direction) {
  var axis = void 0;
  var axises = getVector(direction);

  for (var current in axises) {
    if ({}.hasOwnProperty.call(axises, current)) {
      if (axises[current] !== 0) {
        axis = current;
      }
    }
  }

  return {
    axis: axis,
    value: axises[axis]
  };
}

function getVector(direction) {
  var VECTORS = {};
  VECTORS.UP = { x: 1, y: 0 };
  VECTORS.LEFT = { x: 0, y: 1 };
  VECTORS.DOWN = { x: -1, y: 0 };
  VECTORS.RIGHT = { x: 0, y: -1 };
  return VECTORS[direction];
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
